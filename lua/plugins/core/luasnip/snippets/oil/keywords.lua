-- Define snippets to create easily files and directories.
-- For some file types, some standard files which are often created from scratch (like `README.md`)
-- and not copy/pasted from somewhere else or generated by other tools (like `pyproject.toml`) are
-- available through choice snippets

local ls = require("luasnip")
local show_conds = require("luasnip.extras.conditions.show")

local custom_conds = require("plugins.core.luasnip.conditions")

local i = ls.insert_node
local c = ls.choice_node
local s = ls.snippet
local sn = ls.snippet_node
local t = ls.text_node

local is_in_empty_line = custom_conds.ts.line_begin * show_conds.line_end

return {
  s({ trig = "directory", show_condition = is_in_empty_line }, { i(1, "name"), t("/") }),
  s({ trig = "lua file", show_condition = is_in_empty_line * custom_conds.project.is_lua }, {
    c(1, {
      sn(nil, { i(1, "name"), t(".lua") }),
      t("init.lua"),
      t("temp.lua"),
    }),
  }),
  s({ trig = "markdown file", show_condition = is_in_empty_line }, {
    c(1, {
      sn(nil, { i(1, "name"), t(".md") }),
      t("README.md"),
      t("notes.md"),
    }),
  }),
  s({ trig = "norg file", show_condition = is_in_empty_line }, {
    c(1, {
      sn(nil, { i(1, "name"), t(".norg") }),
      t("todo.norg"),
    }),
  }),
  s({ trig = "python file", show_condition = is_in_empty_line * custom_conds.project.is_python }, {
    c(1, {
      sn(nil, { i(1, "name"), t(".py") }),
      t("__init__.py"),
      t("temp.py"),
    }),
  }),
}
